"use strict";

let a = 5,
    b = a;

b = b + 5;

console.log(b);
console.log(a);
// 10
// 5

// Когда работаем со строками, числами, логическими значениями, то они передаются по значению



// unComment 17 - 31!!!!!!!!!!!!!!!!!!!!!!!!!
// const obj = {
//     a: 5,
//     b: 1
// };

// const copy = obj; //Ссылка
// // В объект "copy" мы не положили идентичный объект, тут мы передаём значение по ссылке. Т.е. эта записть передаёт не структуру, а ссылку

// copy.a = 10;
// // Когда мы побифицируем копию, то мы модифицируем родительский элемент т.к. мы работаем не с копией, а с сылкой
// // Такое поведение называется "Передача по ссылке"

// console.log(copy);
// console.log(obj);
// { a: 10, b: 1 }
// { a: 10, b: 1 }
// Получились одинаковые данные. Мы видим, что изменяя что-то в копии мы меняем это и в родительском элементе

// Когда мы работаем с объектами (массивы, функции, специфические объекты) идёт передача не по значению, а по ссылке


// Для того, чтобы создать копию нужно использовать другие варианты ↓↓↓↓


function copy(mainObj) {
    let objCopy = {};

    let key;
    for (key in mainObj) {
        //У нас есть ключи внутри объекта mainObj
        objCopy[key] = mainObj[key];
        // Берём objCopy, внутри создаём новое свойство = делаем копию из нашего главного объекта. т.е. мы пройдёмся по старому нашему объекту, скопируем его свойства и поместим их в нашу новую копию
    }

    return objCopy;
    // Чтобы работать с нашим новым объектом мы возвращаем objCopy наружу
}
// С помощью этой функции мы создадим новый объект, перебирая старые свойства, которые были в нашем объекте


const numbers = {
    a: 2,
    b: 5,
    c: {
        x: 7,
        y: 4
    }
};
// Создаём объект из которого будем копировать

const newNumbers = copy(numbers);
// В новую переменную(newNumbers) = копируем значения которые были в numbers

newNumbers.a = 10;

newNumbers.c.x = 10;
// 
// { a: 2, b: 5, c: { x: 10, y: 4 } }
// { a: 10, b: 5, c: { x: 10, y: 4 } }


console.log(numbers);
console.log(newNumbers);
// { a: 2, b: 5, c: { x: 7, y: 4 } }
// { a: 10, b: 5, c: { x: 7, y: 4 } }

const add = {
    d: 17,
    e: 20
};
// Объект, который будем добовлять

console.log(Object.assign(numbers, add));
// Добовление в объект (Название первого объекта, название второго объекта)
// Мы создали независимую копию объекта. Она не зависит от numbers и add (Не считая вложенной структуры c {})




// Метод для копии массива ↓↓↓↓↓


const oldArray = [1, 5, 8, 15];
const newArray = oldArray.slice();
// С помощью метода "slice" можем вставлять один массив в другой

newArray[1] = 'asdad';
console.log(oldArray);
console.log(newArray);



// Метод spread ↓↓↓↓↓

const video = ['you', 'vim', 'rut'],
      blogs = ['word', 'lj', 'blogg'],
      internet = [...video, ...blogs, 'vk', 'facebook'];
    //   (...) позволяет добовлять информацию из других баз данных

console.log(internet);


// Ещё 1 пример ↓↓↓↓↓

function log(a, b, c) {
    console.log(a);
    console.log(b);
    console.log(c);
}

const num = [1, 2, 3];

log(...num);
// С помощью (...) функция смогла занести в себя все значения из массива




// Четвёртый способ ↓↓↓↓↓

const array = ["a", "b"];

const newAarray = [...array];
// Теперь в переменной newAarray лежит копия массива array


// Способ с копированием данных в объектах ↓↓↓↓↓

const q = {
    one: 1,
    two: 2
};

const newObj = {...q};
// Копирование данных в объектах